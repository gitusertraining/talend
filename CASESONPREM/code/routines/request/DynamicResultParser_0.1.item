package routines;

import java.util.Optional;
import java.util.Set;

import routines.system.Dynamic;
import routines.system.DynamicMetadata;
import routines.system.JSONObject;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class DynamicResultParser {

	public static String parse(Dynamic columns, Optional<Set<String>> selections, boolean hideRN) {
		JSONObject jsonObject = new JSONObject();
		for (int i = 0; i < columns.getColumnCount(); i++) {
			DynamicMetadata columnMetadata = columns.getColumnMetadata(i);
			String metadatacolumn = columnMetadata.getName();
			Object metadatacolumnvalue = columns.getColumnValue(i);

			if (Utils.isBlank(metadatacolumn)) {
				continue;
			}
			if(hideRN && "RN".equalsIgnoreCase(metadatacolumn)) {
				continue;
			}
			if (selections.isPresent() && !selections.get().contains(metadatacolumn)) {
				continue;
			}

			jsonObject.put(metadatacolumn, metadatacolumnvalue == null ? "" : metadatacolumnvalue);
		}
		
		return jsonObject.toString();

	}
}
